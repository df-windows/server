worker_processes 1;
error_log C:/server/log/nginx.log;
events {worker_connections 1024;}
http {
	access_log off;
	client_max_body_size 64m;
	default_type text/plain;
	# 2015-08-18
	# http://nginx.org/en/docs/http/ngx_http_gzip_module.html
	# http://magento-forum.ru/topic/5187/
	gzip on;
	gzip_disable "msie6";
	gzip_comp_level 6;
	gzip_min_length 1100;
	gzip_buffers 16 8k;
	# By default only the text/html responses are gzipped.
	# I want to gzip other static content too: http://stackoverflow.com/a/12644530
	# http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_types
	gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss;
	keepalive_requests 500;
	keepalive_timeout 600;
	# 2021-04-18
	# 1) The default value is `4 8k`: http://nginx.org/en/docs/http/ngx_http_core_module.html#large_client_header_buffers
	# 2) It is twice as high as in Magento (4k): https://github.com/magento/magento2/blob/2.4.2/lib/internal/Magento/Framework/Stdlib/Cookie/PhpCookieManager.php#L35
	# https://stackoverflow.com/a/19285146
	# 3) I have increased it up to `16k` to emulate the error:
	# «Unable to send the cookie. Size of 'mage-messages' is 8226 bytes»
	# https://github.com/canadasatellite-ca/site/issues/71
	# 4) In my case, Nginx is uses as a proxy to Apache,
	# and Apache has a similar limit defined by the `LimitRequestFieldSize` parameter:
	# https://httpd.apache.org/docs/2.4/mod/core.html#limitrequestfieldsize
	# I have increased it too in the `httpd.conf` file: `LimitRequestFieldSize 16000`.
	# https://stackoverflow.com/a/37497507
	large_client_header_buffers 4 16k;
	log_format websocket '$time_iso8601 $remote_addr $scheme $request_uri $status';
	# 2017-05-22 For Websockets, used by OroCRM.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
	# It prevents Magento 2 failure while paying with PayPal:
	# «upstream sent too big header while reading response header from upstream»
	# "GET /store/paypal/express/return/?token=<...>&PayerID=<...>
	# http://stackoverflow.com/a/23845727
	#
	# 2018-01-02
	# «`fastcgi_buffer_size` is a special buffer space used to hold the first part of the FastCGI response,
	# which is going to be the HTTP response headers.
	#
	# You shouldn't need to adjust this from the default -
	# even if Nginx defaults to the smallest page size of 4KB (your platform will determine if 4/8k buffer)
	# it should fit your typical HTTP header.
	#
	# The one exception I have seen are frameworks that push large amounts of cookie data
	# via the Set-Cookie HTTP header during their user verification/login phase -
	# blowing out the buffer and resulting in a HTTP 500 error.
	# In those instances you will need to increase this buffer to 8k/16k/32k
	# to fully accommodate your largest upstream HTTP header being pushed.»
	#
	# https://gist.github.com/magnetikonline/11312172/fd82ba9eac8a794a86c21ab5fd47069f5de34e0b#introduction
	fastcgi_buffer_size 32k;
	# 2017-05-03
	# This value is recommended by the official sample Nginx config for Magento 2:
	# https://github.com/magento/magento2/blob/2.1.6/nginx.conf.sample#L161
	#
	# 2018-01-02
	# 1) Magento 2 recommends it for PHP files only:
	# https://github.com/magento/magento2/blob/2.2.2/nginx.conf.sample#L168
	# 2) It is for a SINGLE CONNECTION:
	# «Sets the number and size of the buffers used for reading a response from the proxied server,
	# for a single connection.»
	# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffers
	# 3) I have changed it: «1024 4k» => «128 32k»
	fastcgi_buffers 1128 32k;
	# 2019-07-28
	# It solves the «upstream sent too big header» issue:
	# https://ma.ttias.be/nginx-proxy-upstream-sent-big-header-reading-response-header-upstream
	proxy_buffer_size 128k;
	# 2019-07-28
	# It solves the issue:
	# «"proxy_busy_buffers_size" must be less than the size of all "proxy_buffers"
	# minus one buffer»:
	# https://ma.ttias.be/nginx-proxy-upstream-sent-big-header-reading-response-header-upstream
	proxy_buffers 4 256k;
	proxy_busy_buffers_size 256k;
	proxy_connect_timeout 360000;   # 100 часов
    # 2017-05-21
    # It fixes the warning for OroCRM: «[warn] could not build optimal proxy_headers_hash,
    # you should increase either proxy_headers_hash_max_size: 512
    # or proxy_headers_hash_bucket_size: 64».
    proxy_headers_hash_bucket_size 256;
	proxy_read_timeout 360000;   # 100 часов
	send_timeout 360000;   # 100 часов
	# http://serverfault.com/q/269420
	# https://abitwiser.wordpress.com/2011/02/24/virtualbox-hates-sendfile/
	sendfile off;
	include mime.types;
	include sites/*.conf;
}
